@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using PersonalFitnessApp.Data
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<PersonalFitnessAppUser> UserManager
@inject SignInManager<PersonalFitnessAppUser> SignInManager
@inject IdentityUserAccessor UserAccessor


<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        @if (formModel != null)
        {
            <EditForm Model="@formModel" OnValidSubmit="HandleValidSubmit" FormName="ChangeProfile" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="username" class="form-label">Old First Name:</label>
                    <input type="text" value="@OldFirstName" class="form-control" placeholder="Username" disabled />
                </div>
                <div class="form-floating mb-3">
                    <InputText id="firstname" class="form-control" @bind-Value="@formModel.FirstName" />
                    <label class="form-label" for="firstname">New First Name:</label>
                    <ValidationMessage For="@(() => formModel.FirstName)" class="text-danger" />
                </div>
                <div class="form-group">
                    <label for="username" class="form-label">Old Last Name:</label>
                    <input type="text" value="@OldLastName" class="form-control" placeholder="Username" disabled />
                </div>
                <div class="form-floating mb-3">
                    <InputText id="lastname" class="form-control" @bind-Value="@formModel.LastName" />
                    <label for="lastname" class="form-label">New Last Name:</label>
                    <ValidationMessage For="@(() => formModel.LastName)" class="text-danger" />
                </div>
                <div class="form-group">
                    <label for="username" class="form-label">Old Phone Number:</label>
                    <input type="text" value="@OldNumber" class="form-control" placeholder="Username" disabled />
                </div>
                <div class="form-floating mb-3">
                    <InputText id="phone" class="form-control" @bind-Value="formModel.PhoneNumber" />
                    <label for="phone" class="form-label">Phone Number</label>
                    <ValidationMessage For="@(() => formModel.PhoneNumber)" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>

            </EditForm>
        }
        else
        {
            <p>Loading user data...</p>
        }
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private FormModel formModel { get; set; } = new FormModel();
    private PersonalFitnessAppUser? user { get; set; }
    private string? OldFirstName;
    private string? OldLastName;
    private string? OldNumber;
    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var loggedInUser = authenticationState.User;
        user = await UserManager.GetUserAsync(loggedInUser);
        OldFirstName = user.FirstName;
        OldLastName = user.LastName;
        OldNumber = user.PhoneNumber;
    }

    private async Task HandleValidSubmit()
    {
        // Save form data to variables
        user.FirstName = formModel.FirstName;
        user.LastName = formModel.LastName;
        user.PhoneNumber = formModel.PhoneNumber;
        await UserManager.UpdateAsync(user);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    public class FormModel
    {
        [Required(ErrorMessage = "First name is required.")]
        public string? FirstName { get; set; }
        [Required(ErrorMessage = "Last name is required.")]
        public string? LastName { get; set; }
        [Phone(ErrorMessage = "Please input a valid phone number!")]
        public string? PhoneNumber { get; set; }
    }
}
