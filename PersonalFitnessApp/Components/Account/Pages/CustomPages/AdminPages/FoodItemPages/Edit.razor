@page "/fooditems/edit"
@using Microsoft.EntityFrameworkCore
@using PersonalFitnessApp.Domain
@using PersonalFitnessApp.Data
@inject PersonalFitnessAppContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #000;
        color: #fff;
        margin: 0;
        padding: 0;
    }

    h1 {
        color: #FFD700;
        font-size: 2.5rem;
        margin: 20px 0;
    }

    h2 {
        text-align: center;
        color: #FFD700;
        font-size: 2rem;
        margin-bottom: 10px;
    }

    .form-label {
        color: #FFD700;
    }

    .form-control {
        background-color: #222;
        border: 1px solid #FFD700;
        color: #FFD700;
    }

        .form-control:focus {
            background-color: #333;
            border-color: #FFD700;
            color: #FFD700;
        }

    .mb-3 {
        margin-bottom: 15px;
    }

    .btn-primary {
        background-color: transparent;
        color: #FFD700;
        border: 2px solid #FFD700;
        border-radius: 5px;
        font-weight: bold;
        font-size: 0.5rem;
        padding: 5px 20px;
        transition: background-color 0.3s ease, color 0.3s ease;
        width: 100%;
        height: 50;
        text-align: center;
    }

        .btn-primary:hover {
            background-color: #FFD700;
            color: #000;
        }

    .text-danger {
        color: #FF0000;
    }

    .row {
        margin-top: 20px;
    }

    .col-md-4 {
        max-width: 500px;
        margin: 0 auto;
    }

        .col-md-4 input {
            width: 100%;
        }

    .btn-container {
        display: flex;
        justify-content: space-between;
        gap: 10px;
        margin-top: 20px;
    }

        .btn-container a, .btn-container button {
            padding: 10px 25px;
            background-color: transparent;
            color: #FFD700;
            border: 2px solid #FFD700;
            border-radius: 5px;
            font-weight: bold;
            font-size: 1.1rem;
            text-decoration: none;
            transition: background-color 0.3s ease, color 0.3s ease;
            width: 48%; 
            height: 70px;
            text-align: center;
        }



    button[type="submit"] {
        display: inline-block;
    }

</style>
<h1>Edit</h1>

<h2>FoodItem</h2>
<hr />
@if (FoodItem is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="FoodItem" OnValidSubmit="UpdateFoodItem" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="FoodItem.Id" value="@FoodItem.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="FoodItem.Name" class="form-control" />
                    <ValidationMessage For="() => FoodItem.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="calories" class="form-label">Calories:</label>
                    <InputNumber id="calories" @bind-Value="FoodItem.Calories" class="form-control" />
                    <ValidationMessage For="() => FoodItem.Calories" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="carbohydrates" class="form-label">Carbohydrates:</label>
                    <InputNumber id="carbohydrates" @bind-Value="FoodItem.Carbohydrates" class="form-control" />
                    <ValidationMessage For="() => FoodItem.Carbohydrates" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="protein" class="form-label">Protein:</label>
                    <InputNumber id="protein" @bind-Value="FoodItem.Protein" class="form-control" />
                    <ValidationMessage For="() => FoodItem.Protein" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="fibre" class="form-label">Fibre:</label>
                    <InputNumber id="fibre" @bind-Value="FoodItem.Fibre" class="form-control" />
                    <ValidationMessage For="() => FoodItem.Fibre" class="text-danger" />
                </div>
                <div class="btn-container">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <a href="/fooditems">Back to List</a>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private FoodItem? FoodItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var context = DbContext;
        FoodItem ??= await context.FoodItem.FirstOrDefaultAsync(m => m.Id == Id);

        if (FoodItem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateFoodItem()
    {
        var context = DbContext;
        context.Attach(FoodItem!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!FoodItemExists(FoodItem!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/fooditems");
    }

    private bool FoodItemExists(int id)
    {
        var context = DbContext;
        return context.FoodItem.Any(e => e.Id == id);
    }
}
