@page "/bookings"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using PersonalFitnessApp.Domain
@using PersonalFitnessApp.Data
@implements IAsyncDisposable
@inject PersonalFitnessAppContext DbContext
@inject UserManager<PersonalFitnessAppUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="bookings/create">Create New</a>
</p>

<QuickGrid Class="table" Items="filteredBookings">

    <PropertyColumn Property="booking => booking.Date" />
    <PropertyColumn Property="booking => booking.Status" />
    @if (isAdmin)
    {
        <PropertyColumn Property="booking => booking.UserId" />
    }
    <TemplateColumn Context="booking">
        <a href="@($"bookings/details?id={booking.Id}")">Details</a> | 
        <a href="@($"bookings/delete?id={booking.Id}")">Cancel Booking</a>
        <AuthorizeView Roles="Administrator">
            | <a href="@($"bookings/edit?id={booking.Id}")">Edit</a> |
        </AuthorizeView>
    </TemplateColumn>
</QuickGrid>

@code {
    private PersonalFitnessAppContext context = default!;
    private bool isAdmin = false;
    private IQueryable<Booking> filteredBookings = Enumerable.Empty<Booking>().AsQueryable();
    protected override async Task OnInitializedAsync()
    {
        context = DbContext;
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAdmin = authenticationState.User.IsInRole("Administrator");
        var user = await UserManager.GetUserAsync(authenticationState.User);
        var userId = user.Id;
        filteredBookings = isAdmin
            ? context.Booking  // If admin, get all bookings
            : context.Booking.Where(b => b.UserId == userId);
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}