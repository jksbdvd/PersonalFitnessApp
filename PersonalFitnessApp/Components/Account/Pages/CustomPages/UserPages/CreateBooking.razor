@page "/bookings/create"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PersonalFitnessApp.Data
@using PersonalFitnessApp.Domain
@inject PersonalFitnessAppContext DbContext
@inject NavigationManager NavigationManager
@inject UserManager<PersonalFitnessAppUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Create Booking</PageTitle>

<h1 class="page-title">Create Booking</h1>

<div class="form-container">
    <h2>New Booking</h2>
    <hr />
    <EditForm method="post" Model="Booking" OnValidSubmit="AddBooking" FormName="create" Enhance>
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="form-group">
            <label for="date" class="form-label">Date:</label>
            <InputDate id="date" @bind-Value="Booking.Date" class="form-control" />
            <ValidationMessage For="() => Booking.Date" class="text-danger" />
        </div>
        <div class="centered">
            <button type="submit" class="btn">Create</button>
            <a href="/bookings" class="btn">Back to List</a>
        </div>
    </EditForm>
</div>



<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #000;
        color: #fff;
        margin: 0;
        padding: 0;
    }

    h1, h2 {
        text-align: center;
        color: #FFD700;
    }

    h1 {
        font-size: 2.5rem;
        margin: 20px 0;
    }

    h2 {
        font-size: 2rem;
        margin: 10px 0;
    }

    hr {
        border: none;
        height: 2px;
        background-color: #FFD700;
        margin: 10px 0;
    }

    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #111;
        border-radius: 8px;
        border: 3px solid #FFD700;
        box-shadow: 0 4px 8px rgba(255, 255, 255, 0.1);
    }

    .form-group label {
        font-weight: bold;
        color: #FFD700;
        display: block;
        margin-bottom: 5px;
    }

    .form-label {
        color: #FFD700;
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        background-color: #111;
        color: #FFD700;
        border: 2px solid #FFD700;
        border-radius: 5px;
        outline: none;
        transition: border-color 0.3s ease, background-color 0.3s ease;
    }

        .form-control:focus {
            background-color: #333;
            border-color: #FFD700;
            color: #FFD700;
        }

        .form-control::selection {
            background-color: #FFD700;
            color: #000;
        }

    .alert {
        background-color: #111;
        color: #FFD700;
        border: 2px solid #FFD700;
        padding: 10px;
        border-radius: 5px;
        margin-top: 10px;
    }

    .btn {
        background-color: #000;
        color: #FFD700;
        border: 2px solid #FFD700;
        padding: 10px 20px;
        font-weight: bold;
        border-radius: 5px;
        transition: transform 0.3s ease, background-color 0.3s ease, color 0.3s ease;
        cursor: pointer;
    }

        .btn:hover {
            background-color: #FFD700;
            color: #000;
            transform: scale(1.05);
        }

    .centered {
        text-align: center;
        margin-top: 20px;
        font-weight: bold;
    }

        .centered a {
            color: #FFD700;
            text-decoration: none;
            padding: 10px 20px;
            border: 2px solid #FFD700;
            border-radius: 5px;
            transition: transform 0.3s ease, background-color 0.3s ease, color 0.3s ease;
        }

            .centered a:hover {
                background-color: #FFD700;
                color: #000;
                transform: scale(1.05);
            }
</style>
@code {
    [SupplyParameterFromForm]
    private Booking Booking { get; set; } = new();

    private async Task AddBooking()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authenticationState.User;
        var appUser = await UserManager.GetUserAsync(user);
        Booking.UserId = appUser.Id;
        Booking.Status = "Pending";

        var context = DbContext;
        context.Booking.Add(Booking);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/bookings");
    }
}
