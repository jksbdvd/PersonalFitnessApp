@page "/bookings/create"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PersonalFitnessApp.Data
@using PersonalFitnessApp.Domain
@inject PersonalFitnessAppContext DbContext
@inject NavigationManager NavigationManager
@inject UserManager<PersonalFitnessAppUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Booking</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Booking" OnValidSubmit="AddBooking" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="date" class="form-label">Date:</label> 
                <InputDate id="date" @bind-Value="Booking.Date" class="form-control" /> 
                <ValidationMessage For="() => Booking.Date" class="text-danger" /> 
            </div>              
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/bookings">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Booking Booking { get; set; } = new();
    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddBooking()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authenticationState.User;
        var appUser = await UserManager.GetUserAsync(user);
        Booking.UserId = appUser.Id;
        Booking.Status = "Pending";

        var context = DbContext;
        context.Booking.Add(Booking);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/bookings");
    }

}
