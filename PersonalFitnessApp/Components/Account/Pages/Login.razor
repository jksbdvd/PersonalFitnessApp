@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using PersonalFitnessApp.Data

@inject SignInManager<PersonalFitnessAppUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #000;
        color: #FFD700;
        margin: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .login-container {
        background-color: #111;
        border: 2px solid #FFD700;
        border-radius: 10px;
        width: 350px;
        padding: 20px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.6);
    }

        .login-container h1 {
            text-align: center;
            margin-bottom: 20px;
        }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            font-size: 14px;
            margin-bottom: 5px;
        }

        .form-group input[type="email"],
        .form-group input[type="password"] {
            width: 100%;
            padding: 10px;
            font-size: 14px;
            border: 1px solid #FFD700;
            border-radius: 5px;
            background-color: #222;
            color: #FFD700;
        }

        .form-group input:focus {
            outline: none;
            border-color: #FFF;
        }

    .checkbox-group {
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 14px;
    }

    .form-actions {
        margin-top: 20px;
        text-align: center;
    }

        .form-actions button {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            background-color: #FFD700;
            border: none;
            border-radius: 5px;
            color: #000;
            cursor: pointer;
            text-align:center;
            transition: background-color 0.3s ease;
        }

            .form-actions button:hover {
                background-color: #000;
            }

    .links {
        margin-top: 15px;
    }

        .links a {
            color: #FFD700;
            text-decoration: none;
            font-size: 14px;
            margin-top: 5px;
            display: block;
        }

            .links a:hover {
                text-decoration: underline;
            }
</style>

<h1>Log in</h1>
<div class="row">
    <div class="login">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-group">
                    <label for="email" class="form-label">Email</label>
                    <InputText type="email" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-group">
                    <label for="password" class="form-label">Password</label>
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-group checkbox-group">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div class="form-actions">
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div class="links">
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo("Homepage");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
